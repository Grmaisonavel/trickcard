'''Faça um algoritmo que lê uma matriz M5x5 e mostrar os valores digitados para a matriz M.'''
# Lembrando que o tamanho da matriz foi reduzido para 3x3 para que não seja preciso ficar digitando vários valores para testar na aula
N = 3
matriz = []

# Inserindo dados na matriz usando for através da linha.
for l in range(N):
    linha = []
    for c in range(N):
        linha.append(int(input("Informe valores para a matriz: ")))
    matriz.append(linha)
    print(linha)

print(f"Matriz {N}x{N}: ", matriz)

'''Faça um algoritmo que lê uma matriz M5x5. A matriz deve ser preenchida através das colunas, por exemplo, se for digitado:
1,2,3,4,5,6,7,8,9,10,... 
Após mostre a matriz resultante.
'''

matriz =[[0, 0, 0], [0, 0, 0],[0, 0, 0] ]

c = 0
l = 0
# alteramos a lógica da linha(l) e coluna(c)
while c < len(matriz):
    l = 0 # necessário iniciar em 0 a cada nova linha que iniciamos
    while l < len(matriz):
        matriz[l][c] = int(input(f"Informe matriz[{l}][{c}]: "))
        l = l + 1
    c = c + 1

# mostrando a matriz(outra forma)
c = 0
l = 0   
while l < len(matriz):
    c = 0
    while c < len(matriz[l]):
        print(matriz[l][c], end=' ')
        c +=1
    print()
    l += 1

'''Faça um algoritmo que lê uma matriz M5x5 e mostrar os valores da diagonal principal.'''

N = 3
matriz = []

# Inserindo dados na matriz usando for através da linha.
for l in range(N):
    linha = []
    for c in range(N):
        linha.append(int(input("Informe valores para a matriz: ")))
    matriz.append(linha)
    print(linha)

for i in range(N):
    print(f"Matriz(Diagonal)[{i}][{i}] = {matriz[i][i]}")

'''Faça um algoritmo que lê uma matriz M5x5. Calcular e mostrar a soma de todos os valores da linha 4.'''
matriz = []
soma = 0
N = 5
# Inserindo dados na matriz usando for através da linha.
for l in range(N):
    linha = []
    for c in range(N):
        linha.append(int(input("Informe valores para a matriz: ")))
    matriz.append(linha)
    print(linha)

print("Matriz 5x5: ", matriz)

for c in range(N):
    soma = soma + matriz[4][c]

print(f"O valor da soma da linha 4

'''Faça um algoritmo que lê valores para uma matriz M10x10 calcular e mostrar:
O somatório dos valores da coluna 2
O somatório dos valores da diagonal principal
'''
N = 10
matriz = []
soma_col_2 = 0
soma_diagonal_prin = 0
# Inserindo dados na matriz usando for através da linha.
for l in range(N):
    linha = []
    for c in range(N):
        linha.append(int(input("Informe valores para a matriz")))
    matriz.append(linha)
    print(linha)

print(f"Matriz {N}x{N}: ", matriz)

for l in range(N):
    soma_col_2 = soma_col_2 + matriz[l][2]

print(soma_col_2)

for i in range(N):
    soma_diagonal_prin = soma_diagonal_prin + matriz[i][i]

print(soma_diagonal_prin)

'''Faça um algoritmo que receba um valor N correspondente ao tamanho de duas matrizes quadradas de ordem N (NxN).
 Leia os valores inteiros para preencher todas as posições de cada uma das matrizes, e calcule a SOMA das matrizes.'''
# Lembrando que o tamanho da matriz foi reduzido para 3x3 para que não seja preciso ficar digitando vários valores para testar na aula

matrizA = []
matrizB = []
resultado = []

n = int(input("Informe o tamanho da matriz: "))

#preenche A
for l in range(n):
    linha = []
    for c in range(n):
        linha.append(int(input("Informe valores para a matriz A: ")))
    matrizA.append(linha)
#preenche B
for l in range(n):
    linha = []
    for c in range(n):
        linha.append(int(input("Informe valores para a matriz B: ")))
    matrizB.append(linha)

print("Matriz A: ", matrizA)
print("Matriz B: ", matrizB)

# combinando o uso do append com a soma percorrendo os índices da matriz A e da Matriz B
for l in range(n):
    linha = []
    for c in range(n):
        linha.append(matrizA[l][c] + matrizB[l][c])
    resultado.append(linha)

print("Matriz Resultado: ", resultado)

#Faça um algoritmo que lê uma matriz VIM10x10. Troque a seguir os valores contidos 
# na linha de índice 2 com os da linha de índice 8 e também troque os valores da 
# linha de índice 5 com os da coluna de índice 9. No final mostre a matriz.

matriz = []
matriz_aux = []
cont = 0

# para atribuir 100 valores para a matriz utilizei um contador
for l in range(10):
    lista = []
    for c in range(10):
        lista.append(cont)
        cont = cont + 1
    matriz.append(lista)

print("Matriz 10 por 10:")
for p in matriz:
    print(p)

# Trocar linha 2 por 8
# uso do fatiamento [inicio : fim] como não foi definido inicio e fim pega-se todas as colunas da linha 2 
matriz_aux = matriz[2][:]
for n in range(10):
    matriz[2][n] = matriz[8][n]
    matriz[8][n] = matriz_aux[n]

print("Matriz com linhas alteradas:")
for p in matriz:
    print(p)

# Trocar linha 5(2) co coluna 9(4): setar a ram para 5, setar a 5 para 9 setar a 9 para ram
#matriz_aux = matriz[5][:]

#for n in range(10):
#    matriz[5][n] = matriz[n][9]
#    matriz[n][9] = matriz_aux[n]

# também funciona com uma váriavel auxiliar
for n in range(10):
    aux = matriz[5][n]
    matriz[5][n] = matriz[n][9]
    matriz[n][9] = aux

print("Matriz com linha e coluna alterada:")
for p in matriz:
    print(p)

# Faça um algoritmo que lê valores para uma matriz M4X4 e um valor para a variável “a” 
# (do tipo simples, pode ser: inteiro, float). Multiplicar cada valor contido na matriz
# pelo valor da variável e colocar os resultados num vetor(lista) V com 16 elementos. 
# Mostre no final o vetor(lista).

matriz = []
v = []

# faz a leitura da matriz
for l in range(4):
    lista = []
    for c in range(4):
        lista.append(float(input("Digite um valor: ")))
    matriz.append(lista)

#mostra a matriz
print("Matriz 4 por 4:")
for p in matriz:
    print(p)

# faz a leitura da variavel
a = float(input("Digite um número para variável ""a"": "))

# realiza a multiplicação e salva em v
for p in range(4):
    for n in range(4):
        aux = matriz[p][n] * a
        v.append(float(aux))

#mostra a lista resultante
print("Resultado:",v)

#Faça um algoritmo que lê uma matriz M5X5 e crie 2 vetores(listas) SL (soma das linhas) 
# e SC (soma das colunas) com 5 posições cada. Adicionar aos vetores o resultado da soma
#  das linhas e das colunas da matriz, no final mostrar os dois vetores.

matriz  = []
SL = []
SC = []

# preenche a matriz com os valores
for i in range(5):
    matrizAux = []
    for j in range(5):
        matrizAux.append(int(input(f"Digite  o valor da linha {i + 1} coluna {j + 1}: ")))
    matriz.append(matrizAux)

#mostra os valores contidos na matriz
print("\nIMPRESSÃO DA MATRIZ.")  
for linha in matriz:
    for element in linha:
        print(element, end=" ")
    print()

#soma das linhas
'''for linha in matriz:
    soma = 0
    for element in linha:
        soma = soma + element
    SL.append(soma)'''

#soma as colunas
"""n = 0
for y in range(len(matriz)):
    soma = 0 
    for linha in matriz:
        soma = soma + linha[n]
    SC.append(soma)   
    n += 1"""

# soma das linhas e das colunas juntas
for n in range(5):
    SL.append(0)
    SC.append(0)
    for p in range(5):
        SL[n] = SL[n] + matriz[n][p]
        SC[n] = SC[n] + matriz[p][n]

print("\nSoma das Linha :",SL)
print("Soma das Coluna:",SC,"\n")

Faça um algoritmo que lê uma matriz M2X2 que calcula e mostra o resultado do determinante
# desta matriz.

x = [[], []]

# Insere valores na matriz
for index, linha in enumerate(x):
  for c in range(len(x)):
    linha.append(int(input(f'Digite o {c + 1}o valor para a linha {index + 1}: ')))

# Definição das diagonais (principal/secundária)
dp = 1
ds = 1

# Multiplicação das diagonais
'''for c in range(len(x)):
  dp *= x[c][c]
  ds *= x[c][-(c+1)]'''

# Multiplicação das diagonais
dp = x[0][0] * x[1][1]
ds = x[0][1] * x[1][0]

# Print matriz
print('\nMATRIZ: ')
for linha in x:
  print(linha)

# Resultado determinante
print(f'Determinante: {dp - ds} ')

# Faça um programa que leia um vetor(lista) de 5 posições e uma matriz de 5 x 5 calcule e 
# mostre o resultado da multiplicação do primeiro elemento do vetor, por toda a 
# primeira linha da matriz, do segundo item do vetor por toda a segunda linha da 
# matriz e assim sucessivamente.

lista = []
listav = []

# fazendo a leitura da lista(vetor) com 5 elementos
for z in range(5):
    listav.append(int(input("Digite um número para lista:")))

matriz = []

#faz a leitura dos elementos da matriz
for l in range(5):
    lista = []
    for c in range(5):
        lista.append(int(input("Digite um valor: ")))
    matriz.append(lista)

# exibe os valores armazenados na matriz
print("Matriz 5 por 5:")
for p in matriz:
    print(p)
# exibe os valores armazenados na lista(vetor)
print("Lista:",listav)

# realiza a multiplicação de cada elemento do vetor por todos os elementos de uma linha da matriz
for s in range(5):
    for j in range(5):
        matriz[s][j] = matriz[s][j] * listav[s]

#exibe os valores multiplicados outra forma de exibir os valores com fatiamento
'''print("Teste")
print(matriz[:][:])'''

print("Resultado:")
for sas in matriz:
    print(sas)

'''Faça um algoritmo que percorre uma lista com o seguinte formato: [['Brasil', 'Italia', [10, 9]], ['Brasil', 'Espanha', [5, 7]], ['Italia', 'Espanha', [7,8]]]. Essa lista indica o número de faltas que cada time fez em cada jogo. Na lista acima, no jogo entre Brasil e Itália, o Brasil fez 10 faltas e a Itália fez 9. O programa deve imprimir na tela: 
o total de faltas do campeonato;
o time que fez mais faltas;
o time que fez menos faltas;
'''
lista_times = []
lista_faltas = []
total_faltas = []
indice_maior_numero_faltas = 1
indice_menor_numero_faltas = 1

jogos = [['Brasil', 'Italia', [10, 9]],
         ['Brasil', 'Espanha', [5, 7]], 
         ['Italia', 'Espanha', [7, 8]]]

# transformando em uma lista de times e outra lista de faltas
for l in range(len(jogos)):
    for c in range(len(jogos)-1):
        lista_times.append(jogos[l][c])
        lista_faltas.append(jogos[l][2][c])

print(lista_times)
print(lista_faltas)

# definindo o total de faltas
print(f"O total de faltas do campeonato é: {sum(lista_faltas)}")

for i in range(0, len(lista_times)):
    # se o time não está na lista adiciona o time e as faltas
    if(lista_times[i] not in total_faltas):
        total_faltas.append(lista_times[i])
        total_faltas.append(lista_faltas[i])
    else:
        # se o time está na lista encontra na lista total_faltas e soma as faltas
        for j in range(len(total_faltas)):
            if(total_faltas[j] == lista_times[i]):
                total_faltas[j + 1] = total_faltas[j + 1]  + lista_faltas[i]

print("Times e o total de faltas de cada time")
print(total_faltas)

for i in range(1, len(total_faltas), 2):
    # encontra o índice do maior e do menor número de faltas
    if(total_faltas[i] > total_faltas[indice_maior_numero_faltas]):
        indice_maior_numero_faltas = i
    if(total_faltas[i] < total_faltas[indice_menor_numero_faltas]):
        indice_menor_numero_faltas = i 

# após definir o indice do maior e do menor exibe o nome do time, por isso do -1
print(f"O time com menos faltas é: {total_faltas[indice_menor_numero_faltas-1]}")
print(f"O time com mais faltas é: {total_faltas[indice_maior_numero_faltas-1]}")
